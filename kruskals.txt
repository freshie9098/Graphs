class DSU{
    private:
    vector<int>parent,size;
    
    public:
    DSU(int n){
        for(int i = 0; i<=n ;++i){
            parent.push_back(i);
            size.push_back(1);
        }
    }
    
    void unionSize(int u,int v){
        int pu = parent[u];
        int pv = parent[v];
        
        if(pu==pv)return;
        
        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv]+=size[pu];
        }
        else{
            parent[pv] = pu;
            size[pu]+=size[pv]
        }
    }
    
    int findPar(int node){
        if(parent[node]==node)return node;
        
        return parent[node] = findPar(parent[node]);
    }
    
};

class Node{
  int u,int v,int wt;
  Node(int u,int v,int wt){
      this->u = u;
      this->v = v;
      this->wt = wt;
  }
};

bool comp(Node n1,Node n2){
    if(n1.wt<n2.wt)return 1;
    return 0;
}

int mst(vector<Node>adj,int n){
    sort(adj.begin(),adj.end(),comp);
    DSU dsu(n+1);
    int wt = 0;
    for(auto it:adj){
        int p1 = dsu.findPar(it.u); 
        int p2 = dsu.findPar(it.v);
        
        if(p1!=p2){
            dsu.unionSize(it.u,it.v);
            wt+=it.wt;
        }

    }
    
    return wt;
}





























